CSS STRUCTURE

  *global styles for generic classes e.g., typography, animations, vars
  *each component will then have its own css local file for specific styles
  *refactor after UI complete : local -> global styles

------------------------------------------------------------------------------------------------------------ 
TODO LIST
        *fix all errors/warnings
          *remove res binding var for redux middleware
        *fix dispatch for edit/add-expense & add-recurring  
    USER INTERFACE
      general
        *place pagination in separate custom hook   
        *fix remaining display in overview -- padding-top                
        
        *remove category creation in createRecurring/ createExpense
        *category creation will be separate route that is called in Add New Payment component
        
        expenses 
          *allow horizontal scroll
          *add pagination as well 

      REACT FUNCTIONALITY

        *fix overview graph
          *remaining section should be set to zero when -> remaining < 0
        
        *fix data population for budget graph
        
        *categories for modals should be pulled from profile.categories in store 
        
        *move thru each component on home and fix UI 
        
        *remove dollar symbol on all input items
          *make $ class a prop

        *complete year page

    *type checking for all database post methods
    *abstract out mongoose model types i.e., requiredStr = {type: String, required: true}


GERNERAL/APP-WIDE
  *forms design must be improved
  *create a front-end protected route system along with proper redirecting behavior
    *certain pages will require authentication
    solutions
      *a custom hook that sends auth token to server
      *or check redux state for user
        if user is present then user is validated
                                                    
  *proper data loading 
                                                          
  *proper data manipulation
    *components will receive data from redux store
    *that data will need to be altered/moved/calulated on in order to be displayed
------------------------------------------------------------------------------------------------------------
UI TODO LIST

  global
    *create footer component
    *fix header (h1,h2, etc.) hierarchy
     *add rem sizing to all text
       *add % to html tag for rem sizing
       *set breakpoint to downsize all text

  /landing

    header

    Intro 
      *Add video into colored div taken from the home page 
      *find a cool background color
    
    Description
      *add image to green div
      *add background color or image 
      *perhaps increase img size -- deal with that once we have images in place
    
    Footer
      *add background color or image 
      

    /profile/*
      global 
        *add container to content that creates even spacing between title and rest of content
        *mess around with heading class -- smaller could work better
        *normalize colors -- greens and reds should be the same color
        *rename components to appropriate names
          
      *expenses 
        *allow horizontal scroll
    
      *nav
       *toggle nav visibility/placement upon button press
         *nav menu links need to be set to visibility:none in order to be removed from 
         the focus selection list -- accessibility issue. more research needed.

      dashboard

      banner

      budget
        *display nec. spent, ind. spent, and remaining as numbers
          *add amounts to legend items
        *figure out color scheme for graph

      recurring
        *add pagination
          *limit number of categories rendered per page
        *create set height that equals other components of same row and add vertical scroll
        *align dollar signs of the item amounts 

      graph

      expenditures
        *make expenditures box scroll horizontally
          *place inside a container that scrolls
  

------------------------------------------------------------------------------------------------------------

  REDUX STATE

  error/loading handling
    *need a more complex way of dealing with error/loading handling
    *every action that contacts DB will need an error/loading action 
      *possibly separate status flags for each slice of state

  general
    *Eventual integration of redux toolkit
    *perhaps different tools like redux-query...
    
  budget
    *need to combine state from both expenditures and profile.recurringPayments
    *both arrays are pulled from redux store
    *need to add some sort of business logic that combines the results of these two return state values
------------------------------------------------------------------------------------------------------------

EXPRESS API 


  models
    *models need serious work
      *validation and type checking for all variables
      *should exp/profile documents be created in conjuction with user creation documents
      *create separate variables for different field types -> {type: String, required: true...}
      