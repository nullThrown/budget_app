

COMPONENT FILE STRUCTURE

  profile/
    incomeCard.js
    expenditures.js

  forms/
    loginForm.js
    signupForm.js

  landing/

------------------------------------------------------------------------------------------------------------

CSS STRUCTURE

  *global styles for generic classes e.g., typography, animations, vars
  *each component will then have its own css local file for specific styles
  *refactor after UI complete : local -> global styles

------------------------------------------------------------------------------------------------------------

TODO LIST
  Today

    *create all dispatch actions for finance slices
      *edit expenses item requires new route 
  

    *populate home page with data
    *type checking for all database post methods
    *abstract out mongoose model types i.e., requiredStr = {type: String, required: true}
    *implement a no-response error handler for all server requests 


GERNERAL/APP-WIDE
  *create a front-end protected route system along with proper redirecting behavior
    *certain pages will require authentication
    solutions
      *a custom hook that sends auth token to server
      *or check redux state for user
        if user is present then user is validated
                                                    
  *proper data loading 
                                                          
  *proper data manipulation
    *components will receive data from redux store
    *that data will need to be altered/moved/calulated on in order to be displayed
------------------------------------------------------------------------------------------------------------
UI TODO LIST

  global
    *create footer component
    *fix header hierarchy

  /landing

    header
        *Fix header spacing issue
        *center main content
        *fix height to accomodate Intro 'How does coin drop work?' text
        *find background color or img that looks nice
        *change title 'Coin Drop' different font/size etc.
      *mess around with the color gradient -- make it look cool or whatever

    Intro 
      *Add video into colored div taken from the home page 
      *rewrite intro paragraph -- current one is very poor
      *find a cool background color- see how it looks
        *para should provide a succinct but thorough description of the app
        *user should have a strong understanding of what the app actually does
    
    Description
      *add image to green div
      *add background color or image 
      *perhaps increase img size -- deal with that once we have images in place
    
    Footer
      *add background color or image 
      
  profile
      general 
        layout
        sizing
          *add rem sizing to all text
            *add % to html tag for rem sizing
            *set breakpoint to downsize all text

          *fix overflow issues upon smallest size  
          *fix any other issues with sizing upon smaller viewport
          
      *exp 
        *allow horizontal scroll to expenditures component
    
      *nav
       *toggle nav visibility/placement upon button press
         *nav menu links need to be set to visibility:none in order to be removed from 
         the focus selection list -- accessibility issue. more research needed.

    /home
      global 
        *add container to content that creates even spacing between title and rest of content
        *mess around with heading class -- smaller could work better
        *normalize colors -- greens and reds should be the same color -- base colors should be taken from expenditures span items
        *rename components to appropriate names

      nav

      dashboard

      banner

      budget
        *display nec. spent, ind. spent, and remaining as numbers
          *add amounts to legend items
        *figure out color scheme for graph

      recurring
        *add pagination
          *limit number of categories rendered per page
        *create set height that equals other components of same row and add vertical scroll
        *align dollar signs of the item amounts 

      graph

      expenditures
        *make expenditures box scroll horizontally
          *place inside a container that scrolls
  

------------------------------------------------------------------------------------------------------------

  REDUX STATE

  error/loading handling
    *need a more complex way of dealing with error/loading handling
    *every action that contacts DB will need an error/loading action 
      *possibly separate status flags for each slice of state

  general
    *Eventual integration of redux toolkit
    *perhaps different tools like redux-query...
    
  budget
    *need to combine state from both expenditures and profile.recurringPayments
    *both arrays are pulled from redux store
    *need to add some sort of business logic that combines the results of these two return state values
------------------------------------------------------------------------------------------------------------

EXPRESS API 


  models
    *models need serious work
      *validation and type checking for all variables
      *should exp/profile documents be created in conjuction with user creation documents
      *create separate variables for different field types -> {type: String, required: true...}
      